User Stories for Sprint 3:
    
    The focus of these chosen user stories for this sprint was wanted our backend to be all set up, so that next sprint we can synchronize the backend and the GUI. What was completed successfully= implementing most of the backend for piece movements and game mechanics/policies/set-up. 

-----In original backlog; SUBSYSTEM 3-BACKEND:-----
-	As a player
  I want to play against a computer
  So that I can simulate playing against a person.
	STORY POINTS: 2
(Simulated this when we set up the game, we placed every single piece on the computer side in the correct place. Therefore, if we pick white, computer will be aligned as black pieces.)
-	As a player
  I want the game to run on the JVM
  So that it can be portable.
	STORY POINTS: 1
(Wrote it in java and built it using gradle.)
-	As a player
  I want the application to run on a 512mb machine
  So that it can run on a variety of systems.
	STORY POINTS: 1
(Runs off the JVM which can run on this condition.)

-----In original backlog; SUBSYSTEM 2-GAME MECHANICS:-----
-	As a player
  I want a chess game that follows FIDE regulations for Standard American Chess
  So that I have an accurate chess simulator that abides by national tournament standards.
	STORY POINTS: 4
  
-----Added stories; SUBSYSTEM 2-GAME MECHANICS:-----
-	As a player
  I want the pieces for each player to be set-up in their correct position/squares on the board at the start of a game
  So that the game follows standard chess rules.
	STORY POINTS: 4
(This is in player class; puts every piece appropriately in correct spot.)
-	As a player
  I want the board to be organized so that no 2 pieces can ever occupy the same square
  So that the game follows standard chess rules.
	STORY POINTS: 4 (not completed)
(In movePiece method. NOT COMPLETED- Only doe for certain pieces. We are moving pieces via the controller but the work is done in backend; so sending info back and forth between them, which is why we haven't finished this but is high priority for next sprint.)
-	As a player
  I want special movements to be legal- such as “en passant”, “promotion”, and “castling” 
  So that the game follows standard chess rules.
	STORY POINTS: 8 (not completed)
(NOT COMPLETED- Wanted to first complete the basics in terms of backend- getting all piece classes done. This requires knowledge between backend and the controller also, so move to next sprint.)

-----Added stories; SUBSYSTEM 2-GAME MECHANICS; for refactoring purposes:-----
These are all part of refactoring; all deal with making code better/simplifying the piece class and making it modular- individual modules to follow OOD.
-	As a player
  I want pieces to not make illegal moves
  So that neither player can cheat.
	STORY POINTS: 16
-	As a player
  I want the game to prevent any pieces from moving outside of their range/path 
  So that the game follows standard chess rules.
	STORY POINTS: 16
-	As a player
  I want synchronized steps for movement for all pieces 
  So that the game is smooth and no pieces require special clicks and such.
	STORY POINTS: 8
(Set this up using abstract classes for piece movements.)
